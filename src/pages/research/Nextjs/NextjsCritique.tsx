import React from 'react';

const NextjsCritique: React.FC = () => {
  return (
    <section id="critique" className="p-6 border rounded-lg bg-slate-800/40 border-slate-700/50 mb-6">
      <h2 className="mb-4 text-2xl font-semibold text-indigo-400">Критический Взгляд на Next.js</h2>
      
      <div className="text-gray-300">
        <h3 className="text-lg font-semibold text-sky-400 mt-4 mb-2">Фреймворк vs Библиотека: Философский Конфликт</h3>
        <p className="mb-3">
          Next.js трансформирует React из библиотеки UI в полноценный фреймворк, что создает фундаментальный
          философский сдвиг. React позиционируется как гибкая библиотека с минимальными правилами,
          а Next.js вводит соглашения и структуры, которые могут противоречить этой свободе.
          Разработчики "чистого" React могут чувствовать себя ограниченными файловым роутингом,
          предопределенными жизненными циклами и конвенциями Next.js.
        </p>
        
        <h3 className="text-lg font-semibold text-sky-400 mt-4 mb-2">Два Роутера - Дезориентация Экосистемы</h3>
        <p className="mb-3">
          Сосуществование Pages Router и App Router создаёт значительную путаницу, особенно для новичков.
          Документация, обучающие материалы и сторонние библиотеки часто не уточняют, для какого роутера
          они предназначены. Для проектов, начавшихся с Pages Router, миграция на App Router может быть
          не просто обновлением, а существенным переписыванием кода с иной ментальной моделью.
        </p>
        
        <h3 className="text-lg font-semibold text-sky-400 mt-4 mb-2">Сложность Server Components</h3>
        <p className="mb-3">
          React Server Components (RSC) представляют революционную концепцию, но с крутой кривой обучения.
          Возникает много неочевидных ограничений: нельзя использовать хуки в серверных компонентах,
          нельзя передавать функции от серверных компонентов к клиентским, сложно понять, где именно
          проходит граница клиент-сервер. Директивы 'use client' и 'use server' добавляют новый уровень
          сложности, особенно при взаимодействии с типизацией в TypeScript.
        </p>
        
        <h3 className="text-lg font-semibold text-sky-400 mt-4 mb-2">"Магия" и Непрозрачность</h3>
        <p className="mb-3">
          Многие функции Next.js работают как "магия": они удобны, когда всё идет гладко, но могут стать
          кошмаром при отладке. Например, сложно понять, почему конкретное кэширование данных работает
          не так, как ожидалось, или почему определенный компонент перерендеривается. Эта "магия" часто
          требует глубокого понимания внутренностей фреймворка, что противоречит идее упрощения разработки.
        </p>
        
        <h3 className="text-lg font-semibold text-sky-400 mt-4 mb-2">Тесная Связь с Vercel</h3>
        <p className="mb-3">
          Хотя Next.js — проект с открытым исходным кодом, он тесно связан с Vercel, компанией, которая
          его разрабатывает. Некоторые оптимизации и функции Next.js работают лучше всего именно на платформе
          Vercel, что создает определенную привязку к экосистеме. Для разработчиков, использующих другие
          хостинги, могут потребоваться дополнительные настройки и компромиссы.
        </p>
        
        <h3 className="text-lg font-semibold text-sky-400 mt-4 mb-2">Монорепозиторий и Сложность Настройки</h3>
        <p className="mb-3">
          В реальных проектах Next.js часто является частью монорепозитория с общими компонентами, пакетами
          и сервисами. Настройка такой архитектуры с Next.js может быть сложной из-за особенностей его
          системы сборки, маршрутизации и управления зависимостями. Специфические требования Next.js иногда
          конфликтуют со стандартными инструментами монорепозиториев.
        </p>
        
        <h3 className="text-lg font-semibold text-sky-400 mt-4 mb-2">Компромиссы Производительности</h3>
        <p className="mb-3">
          Хотя Next.js предлагает отличные инструменты для оптимизации производительности, они не всегда
          работают идеально "из коробки". Оптимизация изображений может замедлить первоначальную загрузку,
          если не настроена правильно. Server Components могут увеличить время до первого байта (TTFB),
          а избыточное использование SSR может перегрузить сервер. Нужен баланс и понимание компромиссов.
        </p>
        
        <h3 className="text-lg font-semibold text-sky-400 mt-4 mb-2">Заключение</h3>
        <p className="mb-3">
          Next.js — мощный инструмент, который значительно упрощает создание современных веб-приложений.
          Однако, как и любой инструмент, он имеет свои компромиссы. Понимание этих компромиссов критически
          важно для принятия взвешенных архитектурных решений и эффективного использования фреймворка.
          Next.js не является серебряной пулей и не подходит для всех проектов, но в своей нише он 
          предоставляет впечатляющую комбинацию производительности, DX и функциональности.
        </p>
      </div>
    </section>
  );
};

export default NextjsCritique;